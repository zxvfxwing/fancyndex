# CONSTANTS
# EXECUTABLE 	= app
# CPP 		= g++
#CPPFLAGS 	= -Wall $(CPPF_EXTRA) $(STDFLAGS)
#CPPF_EXTRA	= -Wextra -pedantic-errors
#CPPFILES 	= $(wildcard $(SRC_DIR)/*.cpp)
#OBJECTS 	= $(CPPFILES:$(SRC_DIR)%.c=$(OBJ_DIR)/%.o)
#LIBS 		= -lboost_system -lboost_filesystem -lwthttp -lwt
STDFLAGS    =
BIN_DIR		= bin
SRC_DIR		= src
OBJ_DIR		= obj
DIRECTORIES	= $(OBJ_DIR) $(BIN_DIR)

#
#Â >> https://www.gnu.org/software/make/manual/make.html#Phony-Targets
#
# A phony target is one that is not really the name of a file;
# rather it is just a name for a recipe to be executed when you make an explicit request.
# There are two reasons to use a phony target:
# to avoid a conflict with a file of the same name,
# and to improve performance.
.PHONY: all clean cleanall execute directories build

# clean objects files, then compile
all: cleanall directories build execute

# LINKING
build: $(EXECUTABLE)
$(EXECUTABLE): $(OBJECTS)
		$(CPP) $(OBJECTS) $(LIBS) $^ -o $(BIN_DIR)/$(EXECUTABLE)

# COMPILATION
$(OBJ_DIR)/%.o: $(DIR_SOURCE)/%.cpp
		$(CPP) $(CPPFLAGS) -c -o $@ $<

# Delete all OBJECTS
clean:
	@rm -rf $(OBJ_DIR)

# Delete OBJECTS and EXECUTABLE
cleanall: clean
	@rm -rf $(BIN_DIR)

# Create all needed directories
directories: $(DIRECTORIES)
$(DIRECTORIES):
	@mkdir -p $@

# Execute executable
execute:
	./$(BIN_DIR)/$(EXECUTABLE) --docroot . --http-address 0.0.0.0 --http-port 9099
